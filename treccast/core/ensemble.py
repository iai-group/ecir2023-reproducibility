"""Ensemble model to be used with the tsv output files of other first-pass retrievers"""

import csv

from typing import List


class Ensemble:
    def __init__(
        self, filepaths: List[str], rank_thresholds: List[int] = None
    ) -> None:
        """Combines a given number of results from first-pass retrieval methods,
        keeping only unique passages per query.

        Optionally allows for a per-method threshold for number of documents considered.

        Args:
            filepaths: List of the tsv output file paths generated by first-pass
                retrieval methods to create an ensemble of.
            rank_thresholds (optional): Defines the maximum number of passages
                to include for each model. The order of the elements should be
                the same as the file paths. Defaults to None.
        """
        self.filepaths = filepaths
        self.rank_thresholds = rank_thresholds
        self.combined_rankings = []

    def _select_rankings(
        self, rankings: List[List[str]], threshold: int
    ) -> List[List[str]]:
        """Selects the number of passages defined by the threshold parameter
        for each query.

        Args:
            rankings: List of the passages for retrieved by a model, each a list
                containing query_id, query, passage_id, and passage.
            threshold (int): Maximum number of passages to select per query.

        Returns:
            Selected passages for all queries with a maximum number of passages
                per query defined by threshold.
        """
        seen_queries = {}
        selected = []
        for ranking in rankings:
            query_id = ranking[0]
            if seen_queries.get(query_id, 0) < threshold:
                seen_queries[query_id] = seen_queries.get(query_id, 0) + 1
                selected.append(ranking)
        return selected

    def _get_rankings(self) -> List[str]:
        """Reads all files from the file paths provided to the Ensemble class
        constructor.

        Returns:
            List containing a list for each ranking read from the tsv output
                file for each retrieval model.
        """
        rankings = []
        for i, filepath in enumerate(self.filepaths):
            with open(filepath, "r") as f:
                read_tsv = csv.reader(f, delimiter="\t")
                next(read_tsv)
                if self.rank_thresholds is None:
                    rankings.append(list(read_tsv))
                else:
                    rankings.append(
                        self._select_rankings(
                            list(read_tsv), self.rank_thresholds[i]
                        )
                    )

        return rankings

    def combine_rankings(self) -> List[List[str]]:
        """Combines all rankings read from the file paths into a single ranking.

        Each ranking can have a threshold value defined to specify the maximum
        number of passages to use from that model for each query.

        Returns:
            List of the combined retrieval models; the ensemble output.
        """
        rankings = self._get_rankings()
        flattened_rankings = [item for sublist in rankings for item in sublist]
        flattened_rankings.sort()
        removed_duplicates_set = set(map(tuple, flattened_rankings))
        removed_duplicates = list(map(list, removed_duplicates_set))
        removed_duplicates.sort(key=flattened_rankings.index)
        self.combined_rankings = removed_duplicates
        return self.combined_rankings

    def write_to_tsv(self, path: str) -> None:
        """Writes the results of the ensemble method to a file in tsv format.

        Args:
            path: Filepath to the resulting output file.
        """
        with open(path, "w") as f_out:
            tsv_writer = csv.writer(f_out, delimiter="\t")
            tsv_writer.writerow(["query_id", "query", "passage_id", "passage"])
            tsv_writer.writerows(self.combined_rows)


if __name__ == "__main__":
    input_paths = ["data/runs/some_file.tsv"]  # Populate with input
    thresholds = [1000]  # Populate with thresholds
    output_path = "data/runs/ensemble.tsv"  # Set the output path
    ensemble = Ensemble(input_paths, thresholds)
    ensemble.combine_rankings()
    ensemble.write_to_tsv(output_path)
